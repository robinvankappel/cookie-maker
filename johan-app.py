#!/usr/bin/python
# -*- coding: iso-8859-1 -*-

from main_functions import init_program, get_results
import os, sys
import multiprocessing as mp
import time

PARALLEL_PROC = False
path_app = os.path.abspath(os.path.dirname(sys.argv[0]))
#path_app.replace(' ','" "')

## DEFINITION OF DYNAMIC GLOBAL VARIABLES ##
### PROCESS 1:
def define_global_vars_1():
    # Locations
    FLOP_FOLDER = 'INPUT_flops'  # for input folder in main folder
    RESULTS_FOLDER = 'OUTPUT_results'
    MAIN_FOLDER = 'generated_scripts'
    FLOP_DIR = 'C:\\solved_trees_1\\'  # for input folder full path
    RESULTS_DIR = 'C:\\pio_results\\'  # or set to local folder 'OUTPUT_results'
    JSON_DIR = 'C:\\jsons_ready_for_db\\'  # folder where jsons are saved
    PROCESSED_FLOPS_DIR = 'C:\\processed_trees\\'
    # Settings for solving:
    STEP_SIZE = 100  # number of keys retrieved in one Pio command
    FLOP_LOCAL_INPUT_FOLDER = True  # if true local disk is used for flop inputs
    FLOP_LOCAL_RESULTS_FOLDER = True  # if true local disk is used for pio output results files
    MOVE_RESULTS = False  # copy results from local folder to external folder
    MAKE_JSON = True #create a json object
    SEND_JSON = False #send json object to db
    REMOVE_JSON_AFTER_SENDING_DB = False
    REMOVE_PIO_OUTPUTS = False #remove the files generated by Pio (which are saved on disk)
    LOG_SOLVED_FLOPS = True
    MOVE_PROCESSED_FLOPS = False #move the flops which have been handled to another folder
    LOG_NAME = 'solved-flops.log'
    # Tree properties (used in Pio solver):
    POT_TYPE = '3'  # 3bet = 3, 4bet = 4, single raised pot = s
    BET_SIZE = 2.5  # x big blind (e.g. 2.5 or 4)
    # Dictionary of process 1 global variables:
    gl_vars_1 = {'FLOP_FOLDER':FLOP_FOLDER,'RESULTS_FOLDER': RESULTS_FOLDER,'MAIN_FOLDER':MAIN_FOLDER,
                 'FLOP_DIR':FLOP_DIR,'RESULTS_DIR':RESULTS_DIR,'JSON_DIR':JSON_DIR,'PROCESSED_FLOPS_DIR':PROCESSED_FLOPS_DIR,
                 'STEP_SIZE':STEP_SIZE,'FLOP_LOCAL_INPUT_FOLDER':FLOP_LOCAL_INPUT_FOLDER,
                 'FLOP_LOCAL_RESULTS_FOLDER':FLOP_LOCAL_RESULTS_FOLDER,'MOVE_RESULTS':MOVE_RESULTS,
                 'MAKE_JSON':MAKE_JSON,'SEND_JSON':SEND_JSON,
                 'REMOVE_JSON_AFTER_SENDING_DB':REMOVE_JSON_AFTER_SENDING_DB,
                 'REMOVE_PIO_OUTPUTS':REMOVE_PIO_OUTPUTS,
                 'LOG_SOLVED_FLOPS':LOG_SOLVED_FLOPS,'MOVE_PROCESSED_FLOPS':MOVE_PROCESSED_FLOPS,
                 'LOG_NAME':LOG_NAME, 'POT_TYPE':POT_TYPE,'BET_SIZE': BET_SIZE}
    return gl_vars_1

### PROCESS 2:
def define_global_vars_2():
    # Locations
    FLOP_FOLDER = 'INPUT_flops2'  # for input folder in main folder
    RESULTS_FOLDER = 'OUTPUT_results'
    MAIN_FOLDER = 'generated_scripts'
    FLOP_DIR = 'C:\\solved_trees_2\\'  # for input folder full path
    RESULTS_DIR = 'C:\\pio_results\\'  # or set to local folder 'OUTPUT_results'
    JSON_DIR = 'C:\\jsons_ready_for_db\\'  # folder where jsons are saved
    PROCESSED_FLOPS_DIR = 'C:\\processed_trees\\'
    # Settings for solving:
    STEP_SIZE = 10000000  # number of keys retrieved in one Pio command
    FLOP_LOCAL_INPUT_FOLDER = True  # if true local disk is used for flop inputs
    FLOP_LOCAL_RESULTS_FOLDER = True  # if true local disk is used for pio output results files
    MOVE_RESULTS = False  # copy results from local folder to external folder
    MAKE_JSON = False
    SEND_JSON = False
    REMOVE_JSON_AFTER_SENDING_DB = False
    REMOVE_PIO_OUTPUTS = False
    LOG_SOLVED_FLOPS = False
    MOVE_PROCESSED_FLOPS = False
    LOG_NAME = 'solved-flops.log'
    # Tree properties (used in Pio solver):
    POT_TYPE = 's'  # 3bet = 3, 4bet = 4, single raised pot = s
    BET_SIZE = 2.5  # x big blind (e.g. 2.5 or 4)
    # Dictionary of process 1 global variables:
    gl_vars_2 = {'FLOP_FOLDER':FLOP_FOLDER,'RESULTS_FOLDER': RESULTS_FOLDER,'MAIN_FOLDER':MAIN_FOLDER,
                 'FLOP_DIR':FLOP_DIR,'RESULTS_DIR':RESULTS_DIR,'JSON_DIR':JSON_DIR,'PROCESSED_FLOPS_DIR':PROCESSED_FLOPS_DIR,
                 'STEP_SIZE':STEP_SIZE,'FLOP_LOCAL_INPUT_FOLDER':FLOP_LOCAL_INPUT_FOLDER,
                 'FLOP_LOCAL_RESULTS_FOLDER':FLOP_LOCAL_RESULTS_FOLDER,'MOVE_RESULTS':MOVE_RESULTS,
                 'MAKE_JSON':MAKE_JSON,'SEND_JSON':SEND_JSON,
                 'REMOVE_JSON_AFTER_SENDING_DB':REMOVE_JSON_AFTER_SENDING_DB,
                 'REMOVE_PIO_OUTPUTS':REMOVE_PIO_OUTPUTS,
                 'LOG_SOLVED_FLOPS':LOG_SOLVED_FLOPS,'MOVE_PROCESSED_FLOPS':MOVE_PROCESSED_FLOPS,
                 'LOG_NAME':LOG_NAME, 'POT_TYPE':POT_TYPE,'BET_SIZE': BET_SIZE}
    return gl_vars_2

#test function to test multiprocessing
def test(i,j):
    print str(i)
    time.sleep(3)
    print str(j['LOG_NAME'])
    return

def main():
    # parse command line options
    # try:
    if PARALLEL_PROC:
        ##Multiprocessing: Process / Pool / Thread.
        #Using Pool:
        pool = mp.Pool(processes=2)
        global_vars_1 = define_global_vars_1()
        global_vars_2 = define_global_vars_2()
        #init_program(path_app,global_vars_1)#test function
        print 'Starting async process 1'
        one = pool.apply_async(init_program,args=(path_app,global_vars_1))
        time.sleep(3)
        print 'Starting async process 2'
        two = pool.apply_async(init_program,args=(path_app,global_vars_2))
        one.get()
        two.get()
        pool.close()
        pool.join()
    else:
        global_vars_1 = define_global_vars_1()
        init_program(path_app,global_vars_1)
    # except:
    #     print "main function failed"

if __name__ == "__main__":
    main()



